// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map(name: "email_verified")
  image         String?
  role          Role        @default(USER)
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @default(now()) @map(name: "updated_at")

  Project Project[]
  Token Token[]
  Post Post[]
  Activity Activity[]
  Plan Plan[]

  @@map(name: "users")
}

model Plan {
  id                   String     @id @default(cuid())
  user                 User       @relation(fields: [userId], references: [id])
  userId               Int        @unique @map(name: "user_id")

  createdAt            DateTime   @default(now()) @map(name: "created_at")
  updatedAt            DateTime   @default(now()) @map(name: "updated_at")

  stripeCustomerId     String?    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String?    @unique @map(name: "stripe_subsription_id")
  stripePriceId        String?    @map(name: "stripe_price_id")
  stripePeriodEnd      DateTime?  @map(name: "stripe_period_end")

  @@index([id], name: "planId")
  @@map(name: "plans")
}

model Activity {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map(name: "user_id")
  projects    Int      @default(1)
  tokens      Int      @default(0)
  posts       Int      @default(0)
  published   Int      @default(0)
  domains     Int      @default(0)
  images      Int      @default(0)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  @@index([id], name: "activityId")
  @@map(name: "activities")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Editor {
  id        Int      @id @default(autoincrement())
  title     String?
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "editor")
}

model Project {
  id           String   @id @default(cuid())
  name         String
  suffix       Int?     @default(0)
  title        String?  @default("Pure Theme")
  description  String?  @default("Own your own words. Inspire your audience.")
  lang         String?  @default("en")
  domain       String?
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @map(name: "user_id")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
  visitedAt    DateTime @default(now()) @map(name: "visited_at")

  Token Token[]
  Post Post[]
  @@unique([name, suffix])
  @@index([id], name: "projectId")
  @@map(name: "projects")
}

model Token {
  id        String   @default(cuid())
  name      String?
  bearer    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map(name: "user_id")
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @map(name: "project_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@id([id, userId])
  @@index([id], name: "tokenId")
  @@index([id, userId], name: "combinedTokenId")
  @@map(name: "tokens")
}

model Post {
  id          String    @default(cuid())
  title       String    @default("New post: title not set!")
  editordoc   Json?
  slug        String?
  html        String?
  excerpt     String?
  tags        String?
  authors     String?
  docCount    Int       @default(0) @map(name: "doc_count")
  published   Boolean   @default(false)
  publishedAt DateTime? @map(name: "published_at")
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @map(name: "user_id")
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String    @map(name: "project_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")

  @@id([id, userId])
  @@unique([slug, projectId])
  @@index([id], name: "postId")
  @@index([id, userId], name: "combinedPostId")
  @@map(name: "posts")
}
